using System;

namespace CSlab3
{
    class Person
    {
        public int Age { get; set; }
        public string Name { get; set; }
        public static int UniqueCode { get; set; } = 0xAB;

        public Person(int Age, string Name) { this.Age = Age; this.Name = Name; }
        public Person(Person person) { this.Age = person.Age; this.Name = person.Name; }
        public Person() { }
        static Person() { Console.WriteLine("The first instance of class Person was summoned"); }

        ~Person()
        {
            Console.WriteLine("Instance of class Person was deleted");
            Console.ReadKey();
        }

        public override bool Equals(object obj)
        {
            if ((obj == null) || !this.GetType().Equals(obj.GetType()))
            {
                return false;
            }
            else
            {
                Person p = (Person)obj;
                return (Age == p.Age) && (Name == p.Name);
            }
        }

        public override int GetHashCode()
        {
            int res = 0;
            for (int i = 0; i < Name.Length; i++)
                res += (int)Name[i];
            return (Age + res) % UniqueCode;
        }

        public override string ToString()
        {
            return "Name: " + Name + ", " + Age.ToString() + " years";
        }

    }
}

using System;

namespace CSlab3
{
    class Programmer
    {
        public Student Data { get; set; }
        public string GitHubLogin { get; set; }

        public Programmer() { }
        public Programmer(University Location, int Year, int Age, string Name, string GitHubLogin)
        {
            this.GitHubLogin = GitHubLogin;
            Data = new Student(Location, Year, Age, Name);
        }
        public Programmer(Student student, string GitHubLogin)
        {
            Data = student.GetDeepCopy();
            this.GitHubLogin = GitHubLogin;
        }

        public override string ToString()
        {
            return Data.ToString() + ", GitHub login : " + GitHubLogin;
        }

        public static void SwapGitHubLogins(Programmer a, Programmer b)
        {
            string temp = a.GitHubLogin;
            a.GitHubLogin = b.GitHubLogin;
            b.GitHubLogin = temp;
        }

        public void ToLearnCSharp()
        {
            Console.WriteLine("You are learning c#!!!");
        }
    }
}

using System;

namespace CSlab3
{
    class Student
    {
        public University Location { get; set; }
        public int Year { get; set; }
        public Person PersonalData { get; set; }

        public Student() { }
        public Student(University Location, int Year, int Age, string Name)
        {
            this.Location = Location;
            this.Year = Year;
            PersonalData = new Person(Age, Name);
        }
        public Student(University Location, int Year, Person PersonalData)
        {
            this.Location = Location;
            this.Year = Year;
            this.PersonalData = new Person(PersonalData.Age, PersonalData.Name);
        }
        static Student() { Console.WriteLine("The first instance of class Student was summoned"); }

        ~Student()
        {
            Console.WriteLine("Instance of class Student was deleted");
            Console.ReadKey();
        }

        public Student GetShallowCopy() { return (Student)this.MemberwiseClone(); }
        public Student GetDeepCopy() { return new Student(Location, Year, PersonalData.Age, PersonalData.Name); }

        public override string ToString()
        {
            return PersonalData.ToString() + ", university: " + Location + ", " + Year + " years";
        }

        public override bool Equals(object obj)
        {
            if ((obj == null) || !this.GetType().Equals(obj.GetType()))
            {
                return false;
            }
            else
            {
                Student p = (Student)obj;
                return (PersonalData.Age == p.PersonalData.Age) && (PersonalData.Name == p.PersonalData.Name) && (Location == p.Location) && (Year == p.Year);
            }
        }

        public override int GetHashCode()
        {
            return ((PersonalData.GetHashCode() + Year) * 15) % Person.UniqueCode;
        }
    }
}

using System;

namespace CSlab3
{
    class Students
    {
        private Student[] data;

        public Students(int Amount) { data = new Student[Amount]; }

        public Student this[int index]
        {
            get => data[index];
            set
            {
                data[index] = value;
            }
        }
    }
}

namespace CSlab3
{
    enum University
    {
        BSU,
        BSUIR,
        BSEU
    }
}

using System;

namespace CSlab3
{
    class Economist
    {
        public Student Data { get; set; }
        public int Mark { get; set; }

        public Economist() { }
        public Economist(University Location, int Year, int Age, string Name, int mark)
        {
            this.Mark = mark;
            Data = new Student(Location, Year, Age, Name);
        }
        public Economist(Student student, int mark)
        {
            Data = student.GetDeepCopy();
            this.Mark = mark;
        }

        public override string ToString()
        {
            return Data.ToString() + ", mark = " + Mark.ToString();
        }

        public static void SwapMarks(Economist a, Economist b)
        {
            int temp = a.Mark;
            a.Mark = b.Mark;
            b.Mark = temp;
        }

        public void ToCry()
        {
            Console.WriteLine("You are crying!!!");
        }
    }
}

using System;

namespace CSlab3
{
    class Engineer
    {
        public Student Data { get; set; }
        public int Skill { get; set; }

        public Engineer() { }
        public Engineer(University Location, int Year, int Age, string Name, int Skill)
        {
            this.Skill = Skill;
            Data = new Student(Location, Year, Age, Name);
        }
        public Engineer(Student student, int Skill)
        {
            Data = student.GetDeepCopy();
            this.Skill = Skill;
        }

        public override string ToString()
        {
            return Data.ToString() + ", skill = " + Skill.ToString();
        }

        public static void SwapSkills(Engineer a, Engineer b)
        {
            int temp = a.Skill;
            a.Skill = b.Skill;
            b.Skill = temp;
        }

        public void ToRepairUniversity()
        {
            Console.WriteLine("You are repairing university!!!");
        }
    }
}

using System;

namespace CSlab3
{
    class Example
    {
        static void Main(string[] args)
        {
            Person a = new Person(33, "Jack");
            Console.WriteLine(a);
            Person b = new Person(33, "Jack");
            Console.WriteLine(a.Equals(b));  //True
            Console.WriteLine(a.GetHashCode());  //Hash code with basic unique code
            Person.UniqueCode = 23;
            Console.WriteLine(a.GetHashCode());  //Hash code with changed unique code
            Console.WriteLine();


            Student c = new Student(University.BSU, 2, a);
            Console.WriteLine(c);
            Student shallowCopy = c.GetShallowCopy();
            Student deepCopy = c.GetDeepCopy();
            Student simpleCopy = c;
            Console.WriteLine(c.Equals(simpleCopy)); // true
            Console.WriteLine(c.Equals(shallowCopy));  //true
            Console.WriteLine(c.Equals(deepCopy));  //true
            Console.WriteLine(ReferenceEquals(c,simpleCopy)); // true
            Console.WriteLine(ReferenceEquals(c, shallowCopy));  //false, ref !=
            Console.WriteLine(ReferenceEquals(c, deepCopy));  //false, ref !=
            c.PersonalData.Age = 18;
            Console.WriteLine(c.Equals(shallowCopy));  //true, because shallow copy can see only references, but data inside can not
            Console.WriteLine(c.Equals(deepCopy));  //false
            Console.WriteLine(c.GetHashCode());
            Console.WriteLine();

            Students list = new Students(3);
            list[0] = new Student(University.BSU, 20, 4, "Mark");
            list[1] = new Student(University.BSUIR, 19, 3, "John");
            list[2] = new Student(University.BSEU, 17, 1, "Linda");
            Console.WriteLine(list[0]);
            Console.WriteLine(list[1]);
            Console.WriteLine(list[2]);
            Console.WriteLine();

            Economist e = new Economist(list[0], 9);
            Economist f = new Economist(list[1], 8);
            Economist.SwapMarks(e, f);
            Console.WriteLine(e);
            Console.WriteLine(f);
            e.ToCry();
            Console.WriteLine();

            Engineer g = new Engineer(list[1], 6);
            Engineer h = new Engineer(list[0], 5);
            Engineer.SwapSkills(g, h);
            Console.WriteLine(g);
            Console.WriteLine(h);
            g.ToRepairUniversity();
            Console.WriteLine();

            Programmer i = new Programmer(list[1], "blue");
            Programmer o = new Programmer(list[2], "red");
            Programmer.SwapGitHubLogins(i, o);
            Console.WriteLine(i);
            Console.WriteLine(o);
            i.ToLearnCSharp();
            Console.WriteLine();

            Console.ReadKey();
        }
    }
}
